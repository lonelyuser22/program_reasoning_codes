// method 1

package Threads;

class extendsThreadClass extends Thread
{
	public void run()
	{
		System.out.println("Thread is running.");
	}
	
	
	public static void main(String[] args)
	{
		extendsThreadClass obj = new extendsThreadClass();
		obj.start(); //Thread moves from new state to runnable state and run() method will run
	}
	
}


------

package practice;

class Multithreading extends Thread
{
	public void run()
	{
		try
		{
			System.out.println("Thread "+ currentThread().getId() + " is running");
		}
		
		catch (Exception e)
		{
			System.out.println("Exception");
		}
		
	}
	
	public static void main(String[] args)
	{
		for(int i=0; i<8; i++)
		{
			Multithreading obj = new Multithreading();
			obj.start();
		}
	}
	
	
}


---------

//method 2 

package practice;

class multithreading implements Runnable
{
	
	public void run()
	{
		System.out.println(Thread.currentThread().getId());

	}
	
	public static void main(String[] args)
	{
		multithreading obj = new multithreading();
		Thread t1 = new Thread(obj);
		t1.start();
	}
	
}

--------

package practice;

class MultithreadingDemo implements Runnable 
{ 
    public void run() 
    { 
        try
        { 
            // Displaying the thread that is running 
            System.out.println ("Thread " + 
                                Thread.currentThread().getId() + 
                                " is running"); 
  
        } 
        catch (Exception e) 
        { 
            // Throwing an exception 
            System.out.println ("Exception is caught"); 
        }  
        
    }

    public static void main(String[] args) 
    { 
        for (int i=0; i<8; i++) 
    	 	{ 
    	 		Thread object = new Thread( new MultithreadingDemo() ); 
    	 		object.start(); 
    	 	}     
    } 
     
}


----------

//start instead of run

package practice;

class Multithreading extends Thread
{
	public void run()
	{
		for(int i=1;i<5;i++)
		{  
			try
			{
				Thread.sleep(2000);  //milliseconds
			}
			
			catch(InterruptedException e) //when a thread is waiting, sleeping, or otherwise occupied, another thread can interrupt it by invoking the interrupt() method on the thread object. 
			{
				System.out.println(e);
			} 
			
			System.out.println(i);  
		}

	}
	
	public static void main(String[] args)
	{
		Multithreading obj1 = new Multithreading();
		Multithreading obj2 = new Multithreading();
		obj1.start(); //CALLS A SEPARATE CALL STACK
		//obj2.start();	
	}
}

-----------

//run instead of start

package practice;

class Multithreading extends Thread
{  
	 public void run()
	 {  
	  for(int i=1;i<5;i++)
	  {  
	    try
	    {
	    	Thread.sleep(500);
	    }
	    catch(InterruptedException e)
	    {
	    	System.out.println(e);
	    }  
	    
	  System.out.println(i);  
	  }  
	 }
	 
	 public static void main(String args[])
	 {  
		Multithreading t1=new Multithreading();  
		Multithreading t2=new Multithreading();  
	   
		t1.run();  //DOES NOT START A SEPARATE CALL STACK
		t2.run();  
	 }  

}  

-----------


package practice;

class Multithreading extends Thread
{  
  public void run()
  {  
   System.out.println("running...");  
  }  
  
  public static void main(String args[])
  
  {  
	  Multithreading t1=new Multithreading();  
	  Multithreading t2=new Multithreading();  
	  
	  System.out.println("Name of t1:"+t1.getName());  
	  System.out.println("Name of t2:"+t2.getName());  
	  
	  System.out.println("id of t1:"+t1.getId());  
	  System.out.println("id of t2:"+t2.getId());
  
	  t1.start();  
	  t2.start();  
  
	  t1.setName("Sonoo Jaiswal");  
	  System.out.println("After changing name of t1:"+t1.getName());  
 }  
}  

--------------

package practice;

class Multithreading extends Thread
{  
 public void run()
  {  
   System.out.println("running thread name is:"+Thread.currentThread().getName());  
   System.out.println("running thread priority is:"+Thread.currentThread().getPriority());  
  }  
 
 public static void main(String args[])
  {  
	 
	Multithreading m1=new Multithreading();  
	Multithreading m2=new Multithreading();  
	
    m1.setPriority(Thread.MIN_PRIORITY);  
    m2.setPriority(Thread.MAX_PRIORITY);  
    
    m1.start();  
    m2.start();  
   
  }  
}     


--------

// with join

package practice;

class multithreading extends Thread
{
	public void run()
	{
		for(int i=0;i<=5;i++)
		{
			try
			{
				sleep(500);
			}
			
			catch(InterruptedException e)
			{
				System.out.println(e);
			}
			
			System.out.println(i);
		}
	}
	
	public static void main(String[] args)
	{
		multithreading t1 = new multithreading();
		multithreading t2 = new multithreading();
		multithreading t3 = new multithreading();
		
		t1.start();
		try
		{
			t1.join();
		}
		
		catch(Exception e)
		{
			System.out.println(e);
		}
		
		t2.start();
		t3.start();
	}
	
	
}

--------

// synch method

package practice;

class Counter
{
	int count;
	
	public synchronized void increment()
	{
		count++;    
	}

	
	public static void main(String[] args) throws Exception
	{
		
		Counter c = new Counter();

		Thread t1 = new Thread(new Runnable()  //Runnable OBJECT --> DEFINES THREAD BEHAVIOR
				{
					public void run()
					{
						for(int i=1;i<=1000;i++)
						{
							c.increment();
						}
					}
				} 
		);
		
		Thread t2 = new Thread(new Runnable()
		{
			public void run()
			{
				for(int i=1;i<=1000;i++)
				{
					c.increment();
				}
			}
		} 
);
		
		
		t1.start();
		t2.start();
		
		t1.join();
		t2.join();
		
		System.out.println("Count is now: " + c.count);
		
	}
	
}



-------

//synch block - one class

package practice;

class Counter
{
	int count=0;
	
	public void increment()
	{
		System.out.println("Running thread " + Thread.currentThread().getId());
		synchronized(this)
		{
		count++;
		}
	}
	
	public static void main(String[] args) 
	{
		Counter obj = new Counter();
		
		Thread t1 = new Thread( () ->
		{
			for(int i=0;i<1000;i++)
			{
			obj.increment();
			}
			System.out.println(obj.count);
		});
		
		Thread t2 = new Thread( () ->
		{
			for(int i=0;i<1000;i++)
			{
			obj.increment();
			}
			System.out.println(obj.count);
		});
				
		t1.start();
		t2.start();

	}
	
	
}


-----------

//array

public class SharedArray {
    private int[] array = {1, 2, 3, 4, 5};

    public synchronized int sum() {
        int sum = 0;
        for (int value : array) {
            sum += value;
        }
        return sum;
    }

    public synchronized void incrementElement(int index) {
        array[index]++;
        System.out.println("Element at index " + index + " incremented to " + array[index]);
    }

    public static void main(String[] args) {
        final SharedArray sharedArray = new SharedArray();

        Thread sumThread = new Thread(() -> {
            System.out.println("Sum of elements: " + sharedArray.sum());
        });

        Thread incThread = new Thread(() -> {
            for (int i = 0; i < sharedArray.array.length; i++) {
                sharedArray.incrementElement(i);
            }
        });

        sumThread.start();
        incThread.start();

        try {
            sumThread.join();
            incThread.join();
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
    }
}




-----------

//synch block - multiple classes


 package lab;
import java.lang.Thread;
import java.lang.ThreadGroup;
import java.lang.Runnable;


public class P {
	int count=0;
	public void func() {
		System.out.println("Running thread:"+Thread.currentThread().getId());
		for (int i=0;i<1000;i++)
		{
			count++;
		}
	}
	public int getCount() {
		return count;
	}
}
public class Q {
	int count=0;
	public void func() {
		System.out.println("Running thread:"+Thread.currentThread().getId());
		for (int i=0;i<1000;i++)
		{
			count++;
		}
	}
	public int getCount() {
		return count;
	}

}
package lab;

public class A {
	P p=new P();
	Q q=new Q();
	public void fun() {
		synchronized(p){
			p.func();
			int x=p.getCount();
			System.out.println(x);
		}
		synchronized(q){
			q.func();
			int y=q.getCount();
			System.out.println(y);
		}
	}
	public static void main(String[] args) {
		A a=new A();
		Thread t1=new Thread(()->{
			a.fun();
		});
		/*Thread t2=new Thread(()->{
			a.fun();
		});*/
		t1.start();
		//t2.start();
	}

}



---------------

//matrix add BEST 

package lab;



public class matrix {

	public static final int size=3;

	private static int[][] A= {

			{1,2,3},

			{4,5,6},

			{7,8,9}

	};

	private static int[][] B= {

			{9,8,7},

			{6,5,4},

			{3,2,1}

	};

	public static int[][] c=new int[size][size];

	public static void main(String[] args) {

		Thread[] th=new Thread[size];

		for (int row=0;row<size;row++)

		{

			final int r=row;

			th[row]=new Thread(()->add(r));

			th[row].start();

			

			

		}

		for(Thread t:th) {

			try {

				t.join();

			}

			catch(InterruptedException e)

			{

				Thread.currentThread().interrupt();

			}

		}

		System.out.println("Result matrix:");

		for(int[] rows :c)

		{

			for(int val:rows) {

				System.out.print(val+" ");

			}

			System.out.println();

		}

	}

	public static void add(int row) {

		for(int col=0;col<size;col++) {

			c[row][col]=A[row][col]+B[row][col];

		}

	}}



-------------

//matrix addition alternate

public class MatrixAddition {
    private static final int SIZE = 3; // Size of the square matrix
    private static int[][] A = {
        {1, 2, 3},
        {4, 5, 6},
        {7, 8, 9}
    };
    private static int[][] B = {
        {9, 8, 7},
        {6, 5, 4},
        {3, 2, 1}
    };
    private static int[][] C = new int[SIZE][SIZE]; // Resultant matrix

    public static void main(String[] args) {
        Thread[] threads = new Thread[SIZE];

        for (int row = 0; row < SIZE; row++) {
            final int r = row;
            threads[row] = new Thread(() -> addRow(r));
            threads[row].start();
        }

        for (Thread t : threads) {
            try {
                t.join(); // Wait for all threads to complete
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt(); // Re-interrupt the thread
            }
        }

        // Printing the resultant matrix
        System.out.println("Resultant Matrix:");
        for (int[] rows : C) {
            for (int val : rows) {
                System.out.print(val + " ");
            }
            System.out.println();
        }
    }

    private static void addRow(int row) {
        for (int col = 0; col < SIZE; col++) {
            C[row][col] = A[row][col] + B[row][col];
        }
    }
}


--------------

//matrix mult

public class MatrixMultiplication {
    private static final int SIZE = 3; // Size of the square matrix
    private static int[][] A = {
        {1, 2, 3},
        {4, 5, 6},
        {7, 8, 9}
    };
    private static int[][] B = {
        {9, 8, 7},
        {6, 5, 4},
        {3, 2, 1}
    };
    private static int[][] C = new int[SIZE][SIZE]; // Resultant matrix

    public static void main(String[] args) {
        Thread[] threads = new Thread[SIZE];

        for (int row = 0; row < SIZE; row++) {
            final int r = row;
            threads[row] = new Thread(() -> multiplyRowByColumn(r));
            threads[row].start();
        }

        for (Thread t : threads) {
            try {
                t.join(); // Wait for all threads to complete
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt(); // re-interrupt the thread
            }
        }

        // Printing the resultant matrix
        System.out.println("Resultant Matrix:");
        for (int[] rows : C) {
            for (int val : rows) {
                System.out.print(val + " ");
            }
            System.out.println();
        }
    }

    private static void multiplyRowByColumn(int row) {
        for (int col = 0; col < SIZE; col++) {
            C[row][col] = 0;
            for (int k = 0; k < SIZE; k++) {
                C[row][col] += A[row][k] * B[k][col];
            }
        }
    }
}



------------

// each row multiply matrix

class Matrix {
    private final int[][] matrix;

    public Matrix(int[][] matrix) {
        this.matrix = matrix;
    }

    public int[][] getMatrix() {
        return matrix;
    }

    public int getRows() {
        return matrix.length;
    }

    public int getCols() {
        return matrix[0].length;
    }
}

class MatrixAdditionThread extends Thread {
    private final Matrix matrix1;
    private final Matrix matrix2;
    private final Matrix result;
    private final int startRow;
    private final int endRow;

    public MatrixAdditionThread(Matrix matrix1, Matrix matrix2, Matrix result, int startRow, int endRow) {
        this.matrix1 = matrix1;
        this.matrix2 = matrix2;
        this.result = result;
        this.startRow = startRow;
        this.endRow = endRow;
    }

    @Override
    public void run() {
        for (int i = startRow; i < endRow; i++) {
            for (int j = 0; j < matrix1.getCols(); j++) {
                result.getMatrix()[i][j] = matrix1.getMatrix()[i][j] + matrix2.getMatrix()[i][j];
            }
        }
    }
}

public class Main {
    public static void main(String[] args) {
        int[][] arr1 = { {1, 2, 3}, {4, 5, 6}, {7, 8, 9} };
        int[][] arr2 = { {9, 8, 7}, {6, 5, 4}, {3, 2, 1} };

        Matrix matrix1 = new Matrix(arr1);
        Matrix matrix2 = new Matrix(arr2);

        if (matrix1.getRows() != matrix2.getRows() || matrix1.getCols() != matrix2.getCols()) {
            System.out.println("Matrices should have the same dimensions for addition.");
            return;
        }

        int rows = matrix1.getRows();
        int cols = matrix1.getCols();
        Matrix result = new Matrix(new int[rows][cols]);

        int numThreads = 4; // Number of threads
        Thread[] threads = new Thread[numThreads];
        int rowsPerThread = rows / numThreads;

        for (int i = 0; i < numThreads; i++) {
            int startRow = i * rowsPerThread;
            int endRow = (i == numThreads - 1) ? rows : (i + 1) * rowsPerThread;
            threads[i] = new MatrixAdditionThread(matrix1, matrix2, result, startRow, endRow);
            threads[i].start();
        }

        // Wait for all threads to complete
        try {
            for (Thread thread : threads) {
                thread.join();
            }
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        // Display the result
        System.out.println("Matrix Addition Result:");
        int[][] resultMatrix = result.getMatrix();
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                System.out.print(resultMatrix[i][j] + " ");
            }
            System.out.println();
        }
    }
}



------

//health insurance

class HealthInsuranceProgram {
    private double balance;

    public HealthInsuranceProgram(double initialBalance) {
        this.balance = initialBalance;
    }

    public synchronized void claimInsurance(double amount) {
        if (amount > balance) {
            System.out.println("Insufficient balance. Cannot claim insurance.");
            return;
        }
        balance -= amount;
        System.out.println("Insurance claimed successfully: $" + amount);
    }

    public synchronized double getBalance() {
        return balance;
    }

    public synchronized void deposit(double amount) {
        balance += amount;
        System.out.println("Deposited: $" + amount);
    }
}

public class Main {
    public static void main(String[] args) {
        HealthInsuranceProgram insuranceProgram = new HealthInsuranceProgram(1000);

        Thread claimThread = new Thread(() -> {
            insuranceProgram.claimInsurance(500); // Claim insurance of $500
        });

        Thread depositThread = new Thread(() -> {
            insuranceProgram.deposit(300); // Deposit $300
        });

        Thread claimThread2 = new Thread(() -> {
            insuranceProgram.claimInsurance(800); // Try to claim insurance of $800
        });

        Thread depositThread2 = new Thread(() -> {
            insuranceProgram.deposit(200); // Deposit $200
        });

        claimThread.start();
        depositThread.start();
        claimThread2.start();
        depositThread2.start();

        // Wait for all threads to finish
        try {
            claimThread.join();
            depositThread.join();
            claimThread2.join();
            depositThread2.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        System.out.println("Current Balance: $" + insuranceProgram.getBalance());
    }
}


------------

OR

package practice;

class bank
{
	int curr_amt = 0;
	
	public synchronized void deposit(int add)
	{
		curr_amt = curr_amt + add;
		System.out.println(curr_amt);
	}
	
	public synchronized void withdraw(int sub)
	{
		curr_amt = curr_amt - sub;
		System.out.println(curr_amt);	
		
	}
	
	public synchronized void display()
	{
		System.out.println(curr_amt);
	}
	
	public static void main(String[] args) throws InterruptedException
	{
		bank obj = new bank();
		
		Thread t1 = new Thread( () ->
		{
			obj.deposit(50);
		});
		
		Thread t2 = new Thread( () ->
		{
			obj.withdraw(10);
		});
		
		Thread t3 = new Thread( () ->
		{
			obj.display();
		});
		
		t2.start();
		t2.setPriority(Thread.NORM_PRIORITY);
		
		t1.start();
		t1.setPriority(Thread.MAX_PRIORITY);
		
		t3.start();
		t3.setPriority(Thread.MIN_PRIORITY);
		
		t2.join();
		t1.join();
		t3.join();
		
	}
	
	
}

